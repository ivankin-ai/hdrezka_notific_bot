from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.callback_data import CallbackData
from keyboards.inline.callback_data import *

from keyboards.inline.menu_keyboard import Menu

from loader import dp
from states.questions import Questions
from utils.parser.rezka_parser import search_serial
from utils.db_api.SQLighter import SQLighter


# Включаем поиск по имени сериала
@dp.callback_query_handler(text='search_serial')
async def enter_quest(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('Введите название сериала.')
    await Questions.Q1.set()

db = SQLighter('Serials.db')


# Парсим введенное название и выдаем список похожих сериалов и клавиатуру.
@dp.message_handler(state=Questions.Q1)
async def answer_q1(message: types.Message, state=FSMContext):
    name_serial = message.text
    # Получаем список из словарей {name, info, link}
    films = search_serial(name_serial)
    text = 'Выберите один из вариантов: \n\n'
    for film in films:
        number = str(films.index(film)+1)
        text += f"{number}. {film['name']}\n{film['info']}\n{film['link']}\n\n"
        async with state.proxy() as data:
            data[number] = film
    # Получаем клавиатуру где callback_data это порядковый номер
    reply_markup = Menu().get_keyboard_serials(len(films))
    await message.answer(text=text, reply_markup=reply_markup)
    await state.reset_state(with_data=False)


# Отработка нажатия кнопки закрыть
@dp.callback_query_handler(text='close_menu')
async def close_films_buttons(call: CallbackQuery):
    await call.answer(cache_time=1)
    # await call.answer('cancel', show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)


# Отработка нажатия кнопки с номером фильма
@dp.callback_query_handler(serials_callback.filter(key='add_serial'))
async def accept_subcribe(call: CallbackQuery, state: FSMContext, callback_data: dict):
    number = callback_data['number']
    data = await state.get_data()
    data = data[number]
    user_id = call.from_user.id
    name = data['name']
    db.add_sub_db(user_id=user_id, name=name)
    text = f'Подписка оформлена:\n{data["name"]}'
    await call.answer(text, show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)
    await state.reset_data()
    km = Menu()
    rm = km.get_menu(call.from_user.id)
    await call.message.answer(text='Меню бота:', reply_markup=rm)
