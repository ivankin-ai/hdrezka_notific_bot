from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from keyboards.inline import menu_keyboard
from keyboards.inline.callback_data import *
from keyboards.inline.menu_keyboard import Menu
from loader import dp
from aiogram.dispatcher.filters import Command

from states.questions import Questions
from utils.db_api.SQLighter import SQLighter

db = SQLighter('Serials.db')


# Показать главное меню
@dp.message_handler(Command('menu'), state=None)
async def menu_home_command(message: types.Message):
    user_id = message.from_user.id
    kb = Menu()
    reply_markup = kb.get_menu(user_id)
    await message.answer(text='Меню бота.', reply_markup=reply_markup)


# Показать главное меню
@dp.callback_query_handler(text='home_menu')
async def menu_home(call: CallbackQuery):
    user_id = call.from_user.id
    km = Menu()
    reply_markup = km.get_menu(user_id)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(text='Меню бота', reply_markup=reply_markup)


# Показать все подписки :
# Порядковые номера и их callback_data
# Удалить всё
# Главная, Закрыть
@dp.callback_query_handler(text='show_sub_all')
async def show_subs(call: CallbackQuery):
    user_id = call.from_user.id
    # получаем все подписки юзера [{id,name,voice,season,episode,link},]
    subs = db.get_subs_user(user_id)
    if len(subs):
        # Составляем клавиатуру
        km = Menu()
        reply_markup = km.get_keyboard_subs(subs)
        message = str()
        for sub in subs:
            message += f"{subs.index(sub)+1}. {sub['name']}\n" \
                       f"{sub['voice']}\n" \
                       f"{sub['season']}, {sub['episode']}\n\n"
        # убираем старую клавиатуру
        await call.message.edit_reply_markup(reply_markup=None)
        # выводим список подписок и клавитуру к ним
        await call.message.answer(text=message, reply_markup=reply_markup)
    else:
        await call.answer('У вас еще нет подписок.', show_alert=True)
        km = Menu()
        reply_markup = km.get_menu(user_id)
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer(text='Меню бота.', reply_markup=reply_markup)



# Показывает выбранную подписку
# Изменить, Удалить
# Меню, закрыть
@dp.callback_query_handler(menu_subs_callback.filter(key='sub'))
async def open_sub(call: CallbackQuery, callback_data: dict):
    id = callback_data['id']
    sub = db.get_sub(id)
    km = Menu()
    reply_markup = km.get_keyboard_sub(id)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(text=str(sub[0]), reply_markup=reply_markup)



@dp.callback_query_handler(text='edit_sub')
async def edit_sub(call: CallbackQuery):
    await call.answer('Временно недоступно.', show_alert=True)


@dp.callback_query_handler(menu_sub_callback.filter(key='del_sub'))
async def del_sub(call: CallbackQuery, callback_data: dict, state: FSMContext):
    id = callback_data['id']
    db.del_sub_one(id)
    await call.answer('Подписка удалена!', show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)
    km = Menu()
    rm = km.get_menu(call.from_user.id)
    await call.message.answer(text='Меню бота:', reply_markup=rm)


# Удаляет все подписки
@dp.callback_query_handler(text='del_sub_all')
async def del_subs_all(call: CallbackQuery):
    user_id = call.from_user.id
    db.del_sub_all(user_id)
    await call.answer('Все подписки удалены!', show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)
    km = Menu()
    rm = km.get_menu(call.from_user.id)
    await call.message.answer(text='Меню бота:', reply_markup=rm)


